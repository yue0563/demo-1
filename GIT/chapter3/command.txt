
1.版本號
git version


2.建立全域基本資訊
git config --global user.name jerry
git config --global user.email jerry@gmail.com

3.查詢資訊
git config --list

4.產生程式碼倉庫
git init


5.本地專案設定
git config user.name jerrychen
git config user.email jerrychen@gmail.com
git config --list
.git/config


6.工作區==>暫存區   
git add filename  # Untrack==>new file(U==>A)
git add .         # 一次全部加入

ps.產生對應的object(sha1編碼)


7.檢視(工作區/暫存區)狀態
git status	  # U/A/D/M



8.檢查sha-1格式的object
git cat-file -p sha-1 object

-t #型態
-p #內容
-s #大小


9.檢視在暫存區所有檔案
- git ls-file 
- git ls-file -s

10.進入暫存區後的修改
- git add ==>修改(modified)==>git add(確定修改) 
- git restore/checkout ==>恢復修改


11.準備commit(暫存區==>倉庫區)
- git commit -m "紀錄修改文案"


12.已經有進入倉庫區後的修改可以使用
- git commit -am "add 跟 commit一起)


13.修改上一次commit
- git commit --amend


ps.U=>A=>M 可以直接commit , 從倉庫區的修改都需要add


14.觀察commit log
- git log
- git log --oneline


15.git commit ==>進入vim模式
esc切換normal/insert
:w 	代表寫入 = 儲存
:q 	代表離開程式
:!  	代表強制執行
:q!	回到上一個動作
i	insert
a	append
o	new line



16.觀察檔案修改的差異
git diff filename
- 使用git restore/checkout 
- 使用git add 確定修改


17.刪除檔案

- 暫存區
	- git restore 恢復 
	- git add/rm  確認刪除	

- 倉庫區
	- git restore 恢復 
	- git add/rm  確認刪除
		- git commit 需要commit


18.git rm
暫存區
	- git rm --cached 恢復到工作區(U)
		- git add ==>暫存區
	- git rm -f 直接刪除檔案

倉庫區
	 git rm --cached 恢復到工作區(U)
		- git add ==>倉庫區

	 git rm/git rm -f
		- git commit ==>確認刪除 		
		- git restore --staged (unstage) ==>等同手動刪除
			- git add/rm  確認刪除
				- git commit 需要commit

18.git restore
	- 在暫存區/倉儲區刪除的檔案最後都可以使用git restore 進行恢復。
		- 倉庫區git rm時會比手動刪除時多一個git restore –staged指令(unstage)


19.檢視分支
	- git branch

20.創建分支
	- git branch dev+git checkout dev
	- git checkout -b dev
	
	 
21.刪除分支
	- 需切換到其他分支
	- git branch -D dev


22.修改分支名稱
	- git branch -m dev test
	

23.切換commit
	- git checkout commit-object


24.回到過去的修改
	- 需建立分支
	- git reflog 
	

25.分支合併
	- git merge
	- 合併衝突時需要進行處理在commit


26.恢復commit
	- git reset (檔案不會消失)
	- git reset --soft (檔案會再暫存區)
	- git reset --hard (意義上真的刪除) 








